{"version":3,"sources":["component/Register.js","component/Login.js","App.js","serviceWorker.js","index.js"],"names":["Register","makeItem","username","password","name","addUser","item","axios","post","then","res","catch","err","console","log","register","document","getElementById","value","length","alert","window","location","reload","className","id","class","for","type","onClick","Component","Login","getUser","get","data","login","user_data","App","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a36a48cf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Register extends Component {\r\n  \r\n  makeItem = (username, password, name) => {\r\n      return {username: username, password:password, name: name};\r\n  };\r\n\r\n  addUser = item => {\r\n    axios\r\n      .post(\"http://localhost:8000/api/todos/\", item)\r\n      .then(res => {\r\n          return true;\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        return false;\r\n      });\r\n  };\r\n\r\n  register = () => {\r\n      const username = document.getElementById(\"registerUser\").value;\r\n      const password = document.getElementById(\"registerPassword\").value;\r\n      const name = document.getElementById(\"registerName\").value;\r\n      if (username.length <= 0 || password.length <= 0 || name.length <= 0) {\r\n        alert(\"All values must have atleast one character\")\r\n      } else {\r\n        const item = this.makeItem(username, password, name);\r\n        const check = this.addUser(item);\r\n        if (check) {\r\n          alert(\"Registration Succesful! You can now login\");\r\n          window.location.reload();\r\n        } else {\r\n          alert(\"Username has been taken already\");\r\n        }\r\n      }\r\n  };\r\n  \r\n  render() {\r\n    return (\r\n        <div className=\"col-6\">\r\n          <form id=\"loginform\" className=\"bg-light\">\r\n            <div id=\"logintitle\"> Register </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputEmail3\" class=\"col-sm-2 col-form-label\">Name</label>\r\n              <div class=\"col-sm-10\">\r\n                <input id=\"registerName\" type=\"username\" class=\"form-control\"></input>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputEmail3\" class=\"col-sm-2 col-form-label\">Username</label>\r\n              <div class=\"col-sm-10\">\r\n                <input id=\"registerUser\" type=\"username\" class=\"form-control\"></input>\r\n              </div>\r\n            </div>\r\n            <div class=\"form-group row\">\r\n              <label for=\"inputPassword3\" class=\"col-sm-2 col-form-label\">Password</label>\r\n              <div class=\"col-sm-10\">\r\n                <input id=\"registerPassword\" type=\"password\" class=\"form-control\"></input>\r\n              </div>\r\n            </div>\r\n            \r\n            <div class=\"form-group row\">\r\n              <div class=\"col-sm-10\">\r\n                <button onClick={() => this.register()} \r\n                type=\"submit\" class=\"btn btn-primary\">Submit</button>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nexport default class Login extends Component {\r\n\r\n  getUser = username => {\r\n    axios\r\n      .get(\"http://localhost:8000/api/todos/$\" + username + \"/\")\r\n      .then(res => {\r\n           console.log(\"succesful get request; data: \" + res.data);\r\n           return res.data;\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        return {};\r\n      });\r\n  };\r\n\r\n  login = () => {\r\n    const username = document.getElementById(\"loginUser\").value;\r\n    const password = document.getElementById(\"loginPassword\").value;\r\n\r\n    const user_data = this.getUser(username);\r\n    if (user_data) {\r\n        if (user_data.username === username && user_data.password === password) {\r\n        // succesful login -> route to next page with the username atleast\r\n      } else {\r\n        alert(\"Username or Password do not match\");\r\n      }\r\n    } else {\r\n      alert(\"That Username Does Not Exist In Our DataBase\");\r\n    }\r\n  }\r\n  \r\n  render() {\r\n    return (\r\n      <div className=\"col-6\">\r\n        <form id=\"loginform\" className=\"bg-light\">\r\n          <div id=\"logintitle\"> Login </div>\r\n          <div class=\"form-group row\">\r\n            <label for=\"inputEmail3\" class=\"col-sm-2 col-form-label\">Username</label>\r\n            <div class=\"col-sm-10\">\r\n              <input id=\"loginUser\" type=\"username\" class=\"form-control\"></input>\r\n            </div>\r\n          </div>\r\n          <div class=\"form-group row\">\r\n            <label for=\"inputPassword3\" class=\"col-sm-2 col-form-label\">Password</label>\r\n            <div class=\"col-sm-10\">\r\n              <input id=\"loginPassword\" type=\"password\" class=\"form-control\"></input>\r\n            </div>\r\n          </div>\r\n          \r\n          <div class=\"form-group row\">\r\n            <div class=\"col-sm-10\">\r\n              <button onClick={() => this.login()} \r\n              type=\"submit\" class=\"btn btn-primary\">Sign in</button>\r\n            </div>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from \"react\";\nimport Register from \"./component/Register.js\";\nimport Login from \"./component/Login.js\";\n\nclass App extends Component {\n  \n  render() {\n    return (\n      <main className=\"content\">\n        <div id=\"logintitle\"> Pinit! </div>\n        <div className=\"container\">\n          <div className=\"row\">\n            <Login />\n            <Register />\n          </div>\n        </div>\n      </main>\n    );\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'core-js/stable';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/ie11';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}